@startuml

title Class diagram of client side

package com.velvet.m.client {

interface ServerListener{
{abstract} diceRolled()
{abstract} playerJoined()
{abstract} playerMoved()
{abstract} gameStarted()
__ or just ? __
{abstract} onEvent()
}

interface ActionListener {
{abstract} actionPerformed()
}

interface PlayerListener {
{abstract} joinEvent()
{abstract} chatEvent(String s)
{abstract} rollEvent()
{abstract} startEvent()
__ or just ? __
{abstract} onEvent()
}

interface GameView {
{abstract} appendChatText()
}

class Client {
- MessageSender sender
- GameView view
- PlayerListener pl
+ static void main()
}

class Controller implements PlayerListener, ServerListener {
- GameView view
- MessageSender sender
- ArrayList<Player> p
}
note right of Controller: The controller is bound to the view. \nThis typically means that any user \nactions that are performed on the \nview will invoke a registered listener method \nin the controller class. \nThe controller is given a reference to the\n underlying model.

class AkeView implements GameView, ActionListener {
- JFrame frame
- PlayerListener pl
+ setPLayerListener()
}
note right of (AkeView): The view registers as a listener on the model.\n Any changes to the underlying data \nof the model immediately result in a broadcast\n change notification, which the view receives. \nThis is an example of the push model.

class Player {
- Avatar a
}

class Avatar
note right: Not sure what\n to do with this

class ServerAPI implements TransportListener {
- GameTransport gt
- ServerListener sl
+ sendStartGame(GameCmd cmd)
+ sendJoinGame()
+ sendRollDice()
+ sendChatMsg()
+ setServerListener()
__  private methods  __
- onReceive()
}
note left of ServerAPI: Note that the model (service) is not\n aware of the view or the controller \n-- it simply broadcasts change \nnotifications to all interested listeners.

package "com.velvet.m.util   " #DDDDDD {
interface TransportListener {
  {abstract} onReceive()
 }

class Transport implements Runnable {
 - TransportListener gtl
 + run()
 + sendMsg(Message msg)
 + addTransportListener(TransportListener gtl)
 - rcvThread()
 }

 class Message implements Serializable {
  - GameCmd cmd;
  - String response
  - String command
  + Message(GameCmd cmd, String txt)
 }
 note right of Message: A final class \n(from www.bogotobogo.com/Java/tutorial/tcp_socket_server_client.php)

 enum GameCmd {
  JOIN
  ROLL_DICE
  START
  END_TURN
 }
}

Client *-- Controller
Client *-- AkeView
Client *-- ServerAPI
Controller "0..*" *-- "1" Player
Player *-- Avatar : has a symbol <
Controller o- ServerAPI
ServerAPI o--- Transport
Controller o- AkeView
Transport *-- Message




@enduml
